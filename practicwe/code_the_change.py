# -*- coding: utf-8 -*-
"""Code_the_change.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tZX3SAh0tXI_47W5om74JxY-eaIyRGzk
"""

# Commented out IPython magic to ensure Python compatibility.
from datascience import *
import numpy as np
import random as rd 
import warnings
warnings.filterwarnings('ignore')

# %matplotlib inline
import matplotlib.pyplot as plots
plots.style.use('fivethirtyeight')
plots.rcParams["patch.force_edgecolor"] = True

from google.colab import drive
drive.mount('/content/drive')
path = "/content/drive/MyDrive/Colab Notebooks/Code_the_change/"

import geopy.distance

my_location = ['53.52846567719545', '-113.52645770225651']
location_table = Table.read_table(path+'Lats_and_longs_in_ed - Sheet1.csv')
Services_table = Table.read_table(path+'Foodbank - Sheet1.csv')

from math import radians, cos, sin, asin, sqrt
def haversine(lon1, lat1, lon2, lat2):
    """
    Calculate the great circle distance in kilometers between two points 
    on the earth (specified in decimal degrees)
    """
    # convert decimal degrees to radians 
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])

    # haversine formula 
    dlon = lon2 - lon1 
    dlat = lat2 - lat1 
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a)) 
    r = 6371 # Radius of earth in kilometers. Use 3956 for miles. Determines return value units.
    return c * r

def colour_change(x):
  if x == 'Edmonton':
    return "green"
  elif x == 'Calgary':
    return "red"
  else:
    return "black"

Services_table = Services_table\
                .with_column('Distance', Services_table.apply(lambda lat,long:\
                                                              haversine(float(my_location[0]), float(my_location[1]), float(lat), float(long))\
                                                              ,'Latitude', 'Longitude'))
Services_table = Services_table\
                .with_column('color', Services_table.apply(lambda x:\
                                                           colour_change(x), 'Codes'))

Services_table.relabel('Distance', 'labels')
Marker.map_table(Services_table.select('Latitude', 'Longitude', 'labels', 'color'))

foodbank_table = Services_table.relabel('labels', 'Distance')

def in_proximity(table, n=5):
  return(table.sort('Distance', descending=False).take(np.arange(0,n)))
closest_locations = in_proximity(Services_table)
closest_locations.relabel('Distance', 'labels')
Marker.map_table(closest_locations.select('Latitude', 'Longitude', 'labels', 'color'))

closest_locations.relabel('labels', 'Distance')